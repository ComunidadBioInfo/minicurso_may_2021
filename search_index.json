[["index.html", "Mini curso mayo 2021: plotly e iSEE General Código de Conducta Datos Generales Descripción Pre-requisitos Para quién va dirigido este mini curso Actividades Organizadores Formulario de registro Información sesión de R Licencia", " Mini curso mayo 2021: plotly e iSEE Michael Jeziorski Universidad Nacional Autónoma de MéxicoLeonardo Collado-Torres Lieber Institute for Brain Development, Johns Hopkins Medical Campus General Este es el material del mini curso “Exploración interactiva de datos: plotly y iSEE” ofrecido por la Red Mexicana de Bioinformática (RMB) y la Comunidad de Desarrolladores de Software en Bioinformática (CDSB). Fecha: 14 de mayo de 2021 Instructores: Dr. Michael Jeziorski Dr. Leonardo Collado-Torres Código de Conducta Seguiremos el código de conducta de la CDSB México comunidadbioinfo.github.io/es/codigo-de-conducta/ además del código de conducta de Bioconductor bioconductor.org/about/code-of-conduct/. Datos Generales Duración: 2 horas Nivel: Intermedio Idioma: Español e Inglés Fecha: 14 de mayo de 2021 Horario: 16:00 a 18:00 (Centro de México) Modalidad: Online Descripción Este mini curso va dirigido a personas que han usado R para generar gráficas con paquetes de R para visualización como ggplot2. ggplot2 es una excelente herramienta de visualización para cualquier tipo de datos. Sin embargo, ggplot2 genera gráficas estáticas que no permiten explorar de forma interactiva los datos una vez que ya está generada la imagen. Por lo tanto, aprenderemos a usar plotly para convertir las gráficas estáticas generadas por ggplot2 en gráficas interactivas y de los beneficios que estas visualizaciones proveen. Además, en este mini curso aprenderemos a visualizar de forma interactiva datos de RNA-seq y scRNA-seq de forma interactiva con el paquete de Bioconductor iSEE. De tal forma que aprenderemos a generar páginas web interactivas para datos de secuenciación masiva, que es una herramienta de gran utilidad para realizar análisis exploratorios. Usaremos los paquetes de Bioconductor scRNAseq y recount3 para descargar datos públicos que exploraremos con iSEE. Pre-requisitos Computadora con al menos 8 GB de memoria RAM, aplicación Zoom https://zoom.us/download, R versión 4.0 instalada de CRAN https://cran.r-project.org/ (ver video de https://youtu.be/6knyHlUe1cM sobre como instalar R en macOS o winOS), RStudio versión 1.4 https://www.rstudio.com/products/rstudio/download/#download, y los siguientes paquetes de R: ## Para instalar paquetes if (!requireNamespace(&quot;remotes&quot;, quietly = TRUE)) { install.packages(&quot;remotes&quot;) } ## Sección plotly remotes::install_cran(&quot;palmerpenguins&quot;) remotes::install_cran(&quot;ggplot2&quot;) remotes::install_cran(&quot;plotly&quot;) remotes::install_cran(&quot;dplyr&quot;) ## Sección iSEE remotes::install_cran(&quot;BiocManager&quot;) BiocManager::version)() # El anterior comando debe mostrar que estás usando la versión 3.12 BiocManager::install(&quot;iSEE&quot;) BiocManager::install(&quot;scRNAseq&quot;) BiocManager::install(&quot;scater&quot;) BiocManager::install(&quot;Rtsne&quot;) BiocManager::install(&quot;recount3&quot;) Para quién va dirigido este mini curso Este mini curso va dirigido a personas que han usado R para generar gráficas estáticas con ggplot2. Con que sepan hacer las gráficas del capítulo 2 de R Graphics Cookbook en https://r-graphics.org/chapter-quick es suficiente. Aprenderemos a usar plotly para convertir las gráficas estáticas generadas por ggplot2 en gráficas interactivas. Además, en este mini curso aprenderemos a visualizar de forma interactiva datos de RNA-seq y scRNA-seq de forma interactiva con el paquete de Bioconductor iSEE. Esto será de utilidad para quienes están analizando datos de transcriptómica con paquetes de Bioconductor. Usaremos los paquetes de scRNAseq y recount3 para descargar datos públicos. De forma indirecta esto será útil para quienes quieren explorar datos públicamente disponibles de humano o ratón. Actividades 15:45 pm a 16:00 pm: Conéctate a Zoom y configura tu micrófono 16:00 pm a 16:05 pm: Introducción de parte de la Red Mexicana de Bioinformática 16:05 pm a 16:15 pm: Código de conducta y cómo usar la plataforma de Zoom 16:15 pm a 18:00 pm: Actividad del curso Organizadores Comunidad de Desarrolladores de Software en Bioinformática CDSB Red Mexicana de Bioinformática RMB Nodo Nacional de Bioinformática en la UNAM NNB-CCG Formulario de registro https://forms.gle/xPMSkovBDveyegZt8 Información sesión de R Details on the R version used for making this book. The source code is available at lcolladotor/rnaseq_LCG-UNAM_2021. ## Load the package at the top of your script library(&quot;sessioninfo&quot;) ## plotly library(&quot;palmerpenguins&quot;) library(&quot;ggplot2&quot;) library(&quot;plotly&quot;) library(&quot;dplyr&quot;) ## iSEE library(&quot;iSEE&quot;) library(&quot;scRNAseq&quot;) library(&quot;scater&quot;) library(&quot;Rtsne&quot;) library(&quot;recount3&quot;) ## Reproducibility information library(&quot;sessioninfo&quot;) options(width = 120) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.3 (2020-10-10) ## os Ubuntu 20.04 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2021-05-31 ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [2] RSPM (R 4.0.3) ## bookdown 0.21 2020-10-13 [1] RSPM (R 4.0.2) ## cli 2.3.0 2021-01-31 [2] RSPM (R 4.0.3) ## digest 0.6.27 2020-10-24 [2] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [2] RSPM (R 4.0.3) ## glue 1.4.2 2020-08-27 [2] RSPM (R 4.0.3) ## htmltools 0.5.1.1 2021-01-22 [2] RSPM (R 4.0.3) ## knitr 1.31 2021-01-27 [2] RSPM (R 4.0.3) ## magrittr 2.0.1 2020-11-17 [2] RSPM (R 4.0.3) ## rlang 0.4.10 2020-12-30 [2] RSPM (R 4.0.3) ## rmarkdown 2.6 2020-12-14 [1] RSPM (R 4.0.3) ## rstudioapi 0.13 2020-11-12 [2] RSPM (R 4.0.3) ## sessioninfo * 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [2] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [2] RSPM (R 4.0.3) ## withr 2.4.1 2021-01-26 [2] RSPM (R 4.0.3) ## xfun 0.21 2021-02-10 [2] RSPM (R 4.0.3) ## yaml 2.2.1 2020-02-01 [2] RSPM (R 4.0.3) ## ## [1] /__w/_temp/Library ## [2] /usr/local/lib/R/site-library ## [3] /usr/local/lib/R/library proc.time() ## user system elapsed ## 0.514 0.085 0.494 Fecha de la última actualización de esta página: 2021-05-31 19:45:07. Licencia This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["exploración-interactiva-de-datos-con-plotly.html", "1 Exploración interactiva de datos con plotly 1.1 Introducción a plotly 1.2 Graficando datos de palmerpenguins con plotly 1.3 Graficando datos de COVID con plotly", " 1 Exploración interactiva de datos con plotly Author: Mike Jeziorski Date: 5/13/2021 El código de R de este archivo está disponbie vía GitHub. 1.1 Introducción a plotly knitr::include_url(&quot;introduccion.html&quot;) 1.2 Graficando datos de palmerpenguins con plotly # install.packages(c(&quot;tidyverse&quot;, &quot;plotly&quot;, &quot;palmerpenguins&quot;)) library(palmerpenguins) # juego de datos científicos library(tidyverse) # incluye dplyr y ggplot2 ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✔ ggplot2 3.3.3 ✔ purrr 0.3.4 ## ✔ tibble 3.0.6 ✔ dplyr 1.0.4 ## ✔ tidyr 1.1.2 ✔ stringr 1.4.0 ## ✔ readr 1.4.0 ✔ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(plotly) ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout glimpse(penguins) ## Rows: 344 ## Columns: 8 ## $ species &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Ade… ## $ island &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Tor… ## $ bill_length_mm &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0, 37.8, 37.8, 41.1, 38.6, 34.6, 36.… ## $ bill_depth_mm &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, 21.1, 17.… ## $ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186, 180, 182, 191, 198, 185, 195, 197, 18… ## $ body_mass_g &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, 4250, 3300, 3700, 3200, 3800, 4400, 370… ## $ sex &lt;fct&gt; male, female, female, NA, female, male, female, male, NA, NA, NA, NA, female, male, male, f… ## $ year &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2… summary(penguins) ## species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex ## Adelie :152 Biscoe :168 Min. :32.10 Min. :13.10 Min. :172.0 Min. :2700 female:165 ## Chinstrap: 68 Dream :124 1st Qu.:39.23 1st Qu.:15.60 1st Qu.:190.0 1st Qu.:3550 male :168 ## Gentoo :124 Torgersen: 52 Median :44.45 Median :17.30 Median :197.0 Median :4050 NA&#39;s : 11 ## Mean :43.92 Mean :17.15 Mean :200.9 Mean :4202 ## 3rd Qu.:48.50 3rd Qu.:18.70 3rd Qu.:213.0 3rd Qu.:4750 ## Max. :59.60 Max. :21.50 Max. :231.0 Max. :6300 ## NA&#39;s :2 NA&#39;s :2 NA&#39;s :2 NA&#39;s :2 ## year ## Min. :2007 ## 1st Qu.:2007 ## Median :2008 ## Mean :2008 ## 3rd Qu.:2009 ## Max. :2009 ## penguins_hm &lt;- penguins %&gt;% filter(!is.na(sex)) %&gt;% dplyr::count(species, island, sex) %&gt;% ggplot(aes(x = sex, y = species, fill = n)) + geom_tile() + facet_grid(~ island) + theme_classic() + labs(title = &quot;Distribution of penguins&quot;) ggplotly(penguins_hm) penguins_sp &lt;- penguins %&gt;% filter(!is.na(sex)) %&gt;% ggplot(aes(x = bill_length_mm, y = body_mass_g, shape = sex, color = species, text = paste0(&quot;Sex: &quot;, sex, &quot;\\nIsland: &quot;, island, &quot;\\nYear: &quot;, year))) + geom_point() + scale_shape_manual(values = c(1, 16)) + labs(x = &quot;Bill length (mm)&quot;, y = &quot;Body mass (g)&quot;) plotly::ggplotly(penguins_sp, tooltip = &quot;text&quot;) penguins_sp_i &lt;- penguins %&gt;% filter(!is.na(sex)) %&gt;% plotly::plot_ly(x = ~bill_length_mm, y = ~body_mass_g, color = ~species, type = &quot;scatter&quot;, mode = &quot;markers&quot;) # install.packages(&quot;htmlwidgets&quot;) library(htmlwidgets) htmlwidgets::saveWidget(penguins_sp_i, &quot;penguins_scatterplot.html&quot;) 1.3 Graficando datos de COVID con plotly Datos del la Secretaría de Salud, Gobierno de México Fuente de los datos: https://datos.gob.mx/busca/dataset/informacion-referente-a-casos-covid-19-en-mexico Datos crudos: https://www.gob.mx/salud/documentos/datos-abiertos-152127 El archivo “qro_raw_210513.csv” contiene los datos para el 13 de mayo de 2021, filtrado para los residentes del estado de Querétaro. qro_raw &lt;- readr::read_csv(&quot;qro_raw_210513.csv&quot;) ## ## ── Column specification ──────────────────────────────────────────────────────────────────────────────────────────────── ## cols( ## .default = col_double(), ## FECHA_ACTUALIZACION = col_date(format = &quot;&quot;), ## ID_REGISTRO = col_character(), ## ENTIDAD_UM = col_character(), ## ENTIDAD_NAC = col_character(), ## MUNICIPIO_RES = col_character(), ## FECHA_INGRESO = col_date(format = &quot;&quot;), ## FECHA_SINTOMAS = col_date(format = &quot;&quot;), ## FECHA_DEF = col_date(format = &quot;&quot;), ## PAIS_NACIONALIDAD = col_character() ## ) ## ℹ Use `spec()` for the full column specifications. qro_covid_pos &lt;- qro_raw %&gt;% mutate(sexo = case_when(SEXO == 1 ~ &quot;Mujer&quot;, SEXO == 2 ~ &quot;Hombre&quot;, SEXO == 99 ~ NA_character_), tipo_paciente = case_when(TIPO_PACIENTE == 1 ~ &quot;Ambulatorio&quot;, TIPO_PACIENTE == 2 ~ &quot;Hospitalizado&quot;, TIPO_PACIENTE == 99 ~ NA_character_)) %&gt;% filter(RESULTADO_LAB == 1) %&gt;% ggplot(aes(x = FECHA_INGRESO, fill = as.factor(tipo_paciente))) + geom_bar() + labs(x = &quot;Fecha de visita&quot;, y = &quot;Total&quot;, title = &quot;Pacientes positivos en el Edo. de Querétaro (muertos en morado)&quot;, caption = &quot;Fuente: Dirección General de Epidemiología, Gobierno de México&quot;) + scale_fill_manual(name = &quot;Tipo de paciente&quot;, labels = c(&quot;Ambulatorio&quot;, &quot;Hospitalizado&quot;), values = c(&quot;blue&quot;, &quot;red&quot;)) + geom_bar(aes(x = FECHA_DEF), fill = &quot;purple&quot;) + theme_classic() ggplotly(qro_covid_pos) def_emb &lt;- filter(qro_raw, RESULTADO_LAB == 1, EMBARAZO == 1, !is.na(FECHA_DEF)) %&gt;% nrow() qro_covid_emb &lt;- qro_raw %&gt;% mutate(sexo = case_when(SEXO == 1 ~ &quot;Mujer&quot;, SEXO == 2 ~ &quot;Hombre&quot;, SEXO == 99 ~ NA_character_), tipo_paciente = case_when(TIPO_PACIENTE == 1 ~ &quot;Ambulatorio&quot;, TIPO_PACIENTE == 2 ~ &quot;Hospitalizado&quot;, TIPO_PACIENTE == 99 ~ NA_character_)) %&gt;% filter(RESULTADO_LAB == 1, EMBARAZO == 1) %&gt;% ggplot(aes(x = FECHA_INGRESO, y = EDAD, color = as.factor(TIPO_PACIENTE))) + geom_point() + labs(x = &quot;Fecha de ingreso&quot;, y = &quot;Edad&quot;, title = &quot;Mujeres embarazadas positivas para el virus en Edo. de Querétaro&quot;, subtitle = paste0(&quot;Número de defunciones: &quot;, def_emb), caption = &quot;Fuente: Dirección General de Epidemiología, Gobierno de México&quot;) + scale_color_manual(name = &quot;Tipo de paciente&quot;, labels = c(&quot;Ambulatoria&quot;, &quot;Hospitalizada&quot;), values = c(&quot;blue&quot;, &quot;red&quot;)) + ylim(c(0, 50)) + theme_classic() ggplotly(qro_covid_emb, tooltip = c(&quot;FECHA_INGRESO&quot;, &quot;EDAD&quot;)) "],["exploración-interactiva-de-datos-transcriptómicos-con-isee.html", "2 Exploración interactiva de datos transcriptómicos con iSEE 2.1 Infraestructura para datos tránscriptomicos 2.2 Datos públicos 2.3 Explorando con iSEE 2.4 Más material", " 2 Exploración interactiva de datos transcriptómicos con iSEE El código de R de este archivo está disponbie vía GitHub. ## Carguemos las librerías que vamos a usar para esta parte del mini curso ## Infraestructura library(&quot;SummarizedExperiment&quot;) ## Loading required package: MatrixGenerics ## Loading required package: matrixStats ## ## Attaching package: &#39;matrixStats&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## count ## ## Attaching package: &#39;MatrixGenerics&#39; ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, colCounts, colCummaxs, colCummins, ## colCumprods, colCumsums, colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, colMads, colMaxs, ## colMeans2, colMedians, colMins, colOrderStats, colProds, colQuantiles, colRanges, colRanks, colSdDiffs, ## colSds, colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, colWeightedMeans, ## colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, ## rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, rowCumsums, rowDiffs, rowIQRDiffs, ## rowIQRs, rowLogSumExps, rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, ## rowProds, rowQuantiles, rowRanges, rowRanks, rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, ## rowVars, rowWeightedMads, rowWeightedMeans, rowWeightedMedians, rowWeightedSds, rowWeightedVars ## Loading required package: GenomicRanges ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: &#39;BiocGenerics&#39; ## The following objects are masked from &#39;package:parallel&#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport, clusterMap, parApply, ## parCapply, parLapply, parLapplyLB, parRapply, parSapply, parSapplyLB ## The following objects are masked from &#39;package:dplyr&#39;: ## ## combine, intersect, setdiff, union ## The following objects are masked from &#39;package:stats&#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &#39;package:base&#39;: ## ## anyDuplicated, append, as.data.frame, basename, cbind, colnames, dirname, do.call, duplicated, eval, ## evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, order, ## paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ## table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: S4Vectors ## ## Attaching package: &#39;S4Vectors&#39; ## The following object is masked from &#39;package:plotly&#39;: ## ## rename ## The following objects are masked from &#39;package:dplyr&#39;: ## ## first, rename ## The following object is masked from &#39;package:tidyr&#39;: ## ## expand ## The following object is masked from &#39;package:base&#39;: ## ## expand.grid ## Loading required package: IRanges ## ## Attaching package: &#39;IRanges&#39; ## The following object is masked from &#39;package:plotly&#39;: ## ## slice ## The following objects are masked from &#39;package:dplyr&#39;: ## ## collapse, desc, slice ## The following object is masked from &#39;package:purrr&#39;: ## ## reduce ## Loading required package: GenomeInfoDb ## Loading required package: Biobase ## Welcome to Bioconductor ## ## Vignettes contain introductory material; view with &#39;browseVignettes()&#39;. To cite Bioconductor, see ## &#39;citation(&quot;Biobase&quot;)&#39;, and for packages &#39;citation(&quot;pkgname&quot;)&#39;. ## ## Attaching package: &#39;Biobase&#39; ## The following object is masked from &#39;package:MatrixGenerics&#39;: ## ## rowMedians ## The following objects are masked from &#39;package:matrixStats&#39;: ## ## anyMissing, rowMedians library(&quot;SingleCellExperiment&quot;) ## library(&quot;SpatialExperiment&quot;) ## A partir de Bioconductor 3.13 ## que estará disponible a finales de mayo 2021 ## Para descargar y procesar datos library(&quot;scRNAseq&quot;) library(&quot;scater&quot;) library(&quot;Rtsne&quot;) library(&quot;recount3&quot;) ## Para visualizar los datos library(&quot;iSEE&quot;) 2.1 Infraestructura para datos tránscriptomicos SummarizedExperiment SingleCellExperiment Revisemos las diapositivas 31 a 43 de la siguiente presentación Thanks to Pete @PeteHaitch &amp; #OSCA ❤️ I'm now ready for my Human Cell Atlas - Latin America presentation on “Getting started with #scRNA-seq analyses with @Bioconductor” 🎉📔 https://t.co/nEWZcnadyh💻 https://t.co/7pXDTQRpF0#rstats @CDSBMexico @humancellatlas #LatAm pic.twitter.com/Otg8rdSlYW — 🇲🇽 Leonardo Collado-Torres (@lcolladotor) May 2, 2021 Incluso va más allá con SpatialExperiment Are you working with spatial transcriptomics data such as Visium from @10xGenomics? Then you'll be interested in #SpatialExperiment 📦 led by @drighelli @lmwebr @CrowellHL with contributions by @PardoBree @shazanfar A Lun @stephaniehicks @drisso1893 🌟📜 https://t.co/r36qlakRJe pic.twitter.com/cWIiwLFitV — 🇲🇽 Leonardo Collado-Torres (@lcolladotor) January 29, 2021 Usamos SpatialExperiment para hacer spatialLIBD. En este proyecto participó Brenda Pardo, que es una estudiante de tercer año de la LCG-EJ-UNAM en el LIIGH-UNAM. Our paper describing our package #spatialLIBD is finally out! 🎉🎉🎉spatialLIBD is an #rstats / @Bioconductor package to visualize spatial transcriptomics data.⁰This is especially exciting for me as it is my first paper as a first author 🦑.https://t.co/COW013x4GA1/9 pic.twitter.com/xevIUg3IsA — Brenda Pardo (@PardoBree) April 30, 2021 2.2 Datos públicos scRNAseq scRNAseq es un paquete de Bioconductor que creó Aaron Lun para poder tener varios datos de ejemplo de scRNA-seq (secuenciación masiva de ARN de células únicas) para poder demostrar sus métodos estadísticos. Ese paquete lo usan en iSEE para obtener datos de ejemplo y también lo usan mucho en Orchestrating Single Cell Analysis (OSCA) with Bioconductor http://bioconductor.org/books/release/OSCA/. A continuación vamos a descargar unos datos de scRNA-seq que usan en los ejemplos de iSEE en http://bioconductor.org/packages/release/bioc/vignettes/iSEE/inst/doc/basic.html#2_Setting_up_the_data. scRNAseq usa otro paquete de Bioconductor llamado ExperimentHub para descargar los archivos y organizarlos en un lugar de tal forma que si corremos el código otra vez en la misma computadora, no tendremos que volver a descargar los archivos. Es decir, crea un cache local. ## Descarguemos datos de ejemplo de scRNA-seq del proyecto de ## Tasic et al 2016 sce &lt;- ReprocessedAllenData(assays = &quot;tophat_counts&quot;) sce ## class: SingleCellExperiment ## dim: 20816 379 ## metadata(2): SuppInfo which_qc ## assays(1): tophat_counts ## rownames(20816): 0610007P14Rik 0610009B22Rik ... Zzef1 Zzz3 ## rowData names(0): ## colnames(379): SRR2140028 SRR2140022 ... SRR2139341 SRR2139336 ## colData names(22): NREADS NALIGNED ... Animal.ID passes_qc_checks_s ## reducedDimNames(0): ## altExpNames(1): ERCC Los datos que descargamos son datos digamos que crudos, así que necesitamos correr un par de análisis usando scater para que sea más interesante el ejemplo. No es el objetivo de este mini curso explicar esos pasos, aunque a grandes rasgos, nos van a ayudar a que podamos comparar las diferentes células. También nos ayudará a visualizar las células. ## Normalizamos los datos sce &lt;- logNormCounts(sce, exprs_values = &quot;tophat_counts&quot;) ## Obtenemos dimensiones reducidas usando primero un análisis de componentes ## principales y luego con tSNE set.seed(1000) sce &lt;- runPCA(sce) sce &lt;- runTSNE(sce) ## Ahora tenemos datos de PCA y TSNE en nuestro objeto de R reducedDimNames(sce) ## [1] &quot;PCA&quot; &quot;TSNE&quot; ## Podemos ahora calcular unas variables a lo largo de nuestros genes ## tal como la expresión media del gene en las células ## y la varianza rowData(sce)$mean_log &lt;- rowMeans(logcounts(sce)) rowData(sce)$var_log &lt;- apply(logcounts(sce), 1, var) rowData(sce) ## DataFrame with 20816 rows and 2 columns ## mean_log var_log ## &lt;numeric&gt; &lt;numeric&gt; ## 0610007P14Rik 7.9369535 9.37109 ## 0610009B22Rik 6.7572139 10.80402 ## 0610009L18Rik 0.0881306 0.40976 ## 0610009O20Rik 3.6084644 14.97973 ## 0610010F05Rik 6.5254121 13.45587 ## ... ... ... ## Zyg11a 0.0854769 0.109352 ## Zyg11b 8.9813448 3.988757 ## Zyx 2.4291810 11.860900 ## Zzef1 2.9058253 11.223440 ## Zzz3 4.4118629 15.179005 Ahora nuestro objeto sce es más complejo y tiene más información que podremos visualizar con iSEE. recount3 Para que tengan más datos de ejemplo, usaremos datos del proyecto de recount3 vía el cual pueden descargar información de más de 700,000 muestras de RNA-seq de ratón o humano tal como describimos en http://rna.recount.bio/. La idea es que pueden obtener objetos de R del tipo RangedSummarizedExperiment que también podemos visualizar con iSEE. ## Revisemos todos los proyectos con datos de humano en recount3 human_projects &lt;- available_projects() ## Veamos cuantos proyectos hay nrow(human_projects) ## [1] 8742 ## Encuentra tu proyecto de interés. Aquí usaremos ## SRP009615 de ejemplo proj_info &lt;- subset( human_projects, project == &quot;SRP009615&quot; &amp; project_type == &quot;data_sources&quot; ) ## Crea un objetio de tipo RangedSummarizedExperiment (RSE) ## con la información a nivel de genes rse_gene_SRP009615 &lt;- create_rse(proj_info) ## Explora el objeto RSE rse_gene_SRP009615 ## class: RangedSummarizedExperiment ## dim: 63856 12 ## metadata(8): time_created recount3_version ... annotation recount3_url ## assays(1): raw_counts ## rownames(63856): ENSG00000278704.1 ENSG00000277400.1 ... ENSG00000182484.15_PAR_Y ENSG00000227159.8_PAR_Y ## rowData names(10): source type ... havana_gene tag ## colnames(12): SRR387777 SRR387778 ... SRR389077 SRR389078 ## colData names(175): rail_id external_id ... recount_pred.curated.cell_line BigWigURL Los objetos de recount3 tienen ciertas propiedades que aquí no explicaremos. Pero bueno, básicamente los siguientes comandos los querrán usar con los diferentes datos que descarguen de recount3. ## Convirtamos las cuentas por nucleotido a cuentas por lectura ## usando compute_read_counts(). ## Para otras transformaciones como RPKM y TPM, revisa transform_counts(). assay(rse_gene_SRP009615, &quot;counts&quot;) &lt;- compute_read_counts(rse_gene_SRP009615) ## Para este estudio en específico, hagamos más fácil de usar la ## información del experimento rse_gene_SRP009615 &lt;- expand_sra_attributes(rse_gene_SRP009615) colData(rse_gene_SRP009615)[ , grepl(&quot;^sra_attribute&quot;, colnames(colData(rse_gene_SRP009615))) ] ## DataFrame with 12 rows and 4 columns ## sra_attribute.cells sra_attribute.shRNA_expression sra_attribute.source_name sra_attribute.treatment ## &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt; ## SRR387777 K562 no SL2933 Puromycin ## SRR387778 K562 yes, targeting SRF SL2934 Puromycin, doxycycline ## SRR387779 K562 no SL5265 Puromycin ## SRR387780 K562 yes targeting SRF SL3141 Puromycin, doxycycline ## SRR389079 K562 no shRNA expression SL6485 Puromycin ## ... ... ... ... ... ## SRR389082 K562 expressing shRNA tar.. SL2592 Puromycin, doxycycline ## SRR389083 K562 no shRNA expression SL4337 Puromycin ## SRR389084 K562 expressing shRNA tar.. SL4326 Puromycin, doxycycline ## SRR389077 K562 no shRNA expression SL1584 Puromycin ## SRR389078 K562 expressing shRNA tar.. SL1583 Puromycin, doxycycline 2.3 Explorando con iSEE 2.3.1 sce if (interactive()) { iSEE(sce, appTitle = &quot;Aprendiendo a usar iSEE&quot;) } Exploremos varias variables (column data) en los PCA y TSNE. ¿Qué variable separa los grupos de muestras? ¿Qué muestra tiene la mayor cantidad de número de lecturas (NREADS)? Aprendamos a hacer _facet_s en el panel que muestra información de los genes (feature assay plot 1) y a ligar ese panel a la tabla con información de los genes Comparemos el número de lecturas (NREADS) usando _facet_s por disección. ¿Alguna nos llama la atención? Podemos usar la columna de “passes qc checks”. Hagamos una gráfica de la media (eje X) vs la varianza (eje Y) de expresión de los genes. ¿Vemos algún patrón? 2.3.2 Ejercicio Ejercicio: https://lcolladotor.github.io/rnaseq_LCG-UNAM_2021/datos-de-rna-seq-a-trav%C3%A9s-de-recount3.html#ejercicio-1 if (interactive()) { iSEE(rse_gene_SRP009615, appTitle = &quot;iSEE con datos de recount3&quot;) } 2.3.3 Datos reales Datos de https://www.biorxiv.org/content/10.1101/2020.10.07.329839v1.full que pueden ver en pagínas web creadas con iSEE a través de https://github.com/LieberInstitute/10xPilot_snRNAseq-human#explore-the-data-interactively. Para lograr esto subimos el resultado de iSEE a https://shinyapps.io. 2.4 Más material Si les llamó la atención iSEE y recount3, vía https://lcolladotor.github.io/rnaseq_LCG-UNAM_2021 pueden aprender más sobre estos paquetes. "]]
